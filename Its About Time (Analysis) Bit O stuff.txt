Analysis of permute:


//  Generate a random permutation of the integers from
//  0 .. n-1, storing the results in array a.
//
void permute (int a[], int n)
{
  // Array of booleans: used[k] is true if we have already
  // put k somewhere into the array a
  bool* used = new bool[n];
  fill (used, used+n, false);
  for (int i = 0; i < n; i++)
    {
      // Guess at a value to put into a[i]
      a[i] = rnd(n);
      while (used[a[i]])
        {
	 // If it's one that we've already used, guess again.
         a[i] = rnd(n);
        }
      used[a[i]] = true;
    }
  delete [] used;
}

Start by marking the obvious O(1) items:

void permute (int a[], int n)
{
  // Array of booleans: used[k] is true if we have already
  // put k somewhere into the array a
  bool* used = new bool[n];  // O(1)
  fill (used, used+n, false);
  for (int i = 0; i < n; i++)  // O(1)
    {
      // Guess at a value to put into a[i]
      a[i] = rnd(n);       // O(1)
      while (used[a[i]])   // O(1)
	 // If it's one that we've already used, guess again.
         a[i] = rnd(n);    // O(1)
      used[a[i]] = true;   // O(1)
    }
  delete [] used;  // O(1)
}

The fill function initializes n elements of the array
to "false", so this is O(n):

void permute (int a[], int n)
{
  // Array of booleans: used[k] is true if we have already
  // put k somewhere into the array a
  bool* used = new bool[n];   // O(1)
  fill (used, used+n, false); // O(n)
  for (int i = 0; i < n; i++) // O(1)
    {
      // Guess at a value to put into a[i]
      a[i] = rnd(n);       // O(1)
      while (used[a[i]])   // O(1)
	 // If it's one that we've already used, guess again.
         a[i] = rnd(n);    // O(1)
      used[a[i]] = true;   // O(1)
    }
  delete [] used;  // O(1)
}


Now, let's look at the inner loop. This loop checks to see if the
randomly selected value for a[i] is one that we have already put
somewhere in the array. If so, we go around the loop, choosing a new
random value to put in a[i].

When we start this process, we have filled values in to
a[0]...a[i-1]. So of the n different integers that we might come up
with via a random choice, i of those n have already been used. (n-i)
integers remain as acceptable possibilities. That means that the
probability of a random selection being acceptable (not already used)
is (n-i)/n.

For example, when i is 0, we have not used up any of the possible
integers yet, so the chance of a randomly selected value being
acceptable is (n-0)/n = 1.  On the other hand, when i==n-1, we have
used all but one of the n integers already, so the chances of a random
choice being the only rmeaining possibility is (n-(n-1))/n = 1/n.

If the probability of failing the loop test is p=(n-i)/n, then the
average number of times we will execute the loop is 1/p, or n/(n-i).

void permute (int a[], int n)
{
  // Array of booleans: used[k] is true if we have already
  // put k somewhere into the array a
  bool* used = new bool[n];  // O(1)
  fill (used, used+n, false); // O(n)
  for (int i = 0; i < n; i++)  // O(1)
    {
      // Guess at a value to put into a[i]
      a[i] = rnd(n);       // O(1)
      while (used[a[i]])   // O(1) n/(n-i)*
	 // If it's one that we've already used, guess again.
         a[i] = rnd(n);    // O(1)
      used[a[i]] = true;   // O(1)
    }
  delete [] used;  // O(1)
}
 

So the inner loop executes an average of n/(n-i) times, taking (O(1) +
O(1)) time for each execution. So the overall complexity of the loop
is O(n/(n-i)):

void permute (int a[], int n)
{
  // Array of booleans: used[k] is true if we have already
  // put k somewhere into the array a
  bool* used = new bool[n];  // O(1)
  fill (used, used+n, false); // O(n)
  for (int i = 0; i < n; i++)  // O(1)
    {
      // Guess at a value to put into a[i]
      a[i] = rnd(n);       // O(1)
      while (used[a[i]])   // O(1) n/(n-i)* = O(n/(n-i))
	 // If it's one that we've already used, guess again.
         a[i] = rnd(n);    // O(1)
      used[a[i]] = true;   // O(1)
    }
  delete [] used;  // O(1)
}

Replace the inner loop code by the O(...) marker

void permute (int a[], int n)
{
  // Array of booleans: used[k] is true if we have already
  // put k somewhere into the array a
  bool* used = new bool[n];  // O(1)
  fill (used, used+n, false); // O(n)
  for (int i = 0; i < n; i++)  // O(1)
    {
      // Guess at a value to put into a[i]
      a[i] = rnd(n);       // O(1)
      // O(n/(n-i))
      used[a[i]] = true;   // O(1)
    }
  delete [] used;  // O(1)
}


So the total body for the outer loop is O(n/(n-i))

void permute (int a[], int n)
{
  // Array of booleans: used[k] is true if we have already
  // put k somewhere into the array a
  bool* used = new bool[n];  // O(1)
  fill (used, used+n, false); // O(n)
  for (int i = 0; i < n; i++)  // O(1)
    {
      // O(n/(n-i))
    }
  delete [] used;  // O(1)
}

That loop executes exactly n times:

void permute (int a[], int n)
{
  // Array of booleans: used[k] is true if we have already
  // put k somewhere into the array a
  bool* used = new bool[n];  // O(1)
  fill (used, used+n, false); // O(n)
  for (int i = 0; i < n; i++)  // O(1) n*
    {
      // O(n/(n-i))
    }
  delete [] used;  // O(1)
}

We cannot apply the shortcut of taking n*(O(cond) + O(body)), because
the complexity of the body involves i, and i changes each time around
this loop. So the loop complexity is O(f(N)) where f(N) is a sum:
  f(n) = sum(i=0,n-1,n/(n-i))
       = n/n + n/(n-1) + n/(n-2) + ... + n/3 + n/2 + n/1
       = n * (1/n + 1/(n-1) + 1/(n-2) + ... + 1/3 + 1/2 + 1/1)
Now we can add the terms of the sum in any order:
  f(n) = n * (1/1 + 1/2 + 1/3 + ... + 1/(n-2) + 1/(n-1) + 1/n)
That mkes it a little easier to see that this is one of the sums in
the FAQ: sum(i=0, n, 1/i) = O(log n)
  f(n) = n * O(log n)

void permute (int a[], int n)
{
  // Array of booleans: used[k] is true if we have already
  // put k somewhere into the array a
  bool* used = new bool[n];  // O(1)
  fill (used, used+n, false);  // O(n)
  for (int i = 0; i < n; i++)  // O(1) n* =O(n*log(n))
    {
      // O(n/(n-i))
    }
  delete [] used;  // O(1)
}

Replace the loop by its complexity:

void permute (int a[], int n)
{
  // Array of booleans: used[k] is true if we have already
  // put k somewhere into the array a
  bool* used = new bool[n];   // O(1)
  fill (used, used+n, false); // O(n)
  // O(n*log(n))
  delete [] used;  // O(1)
}

So the complexity of the entire function is O(1 + n + n*log(n) + 1) which
simplifies to O(n*log(n))